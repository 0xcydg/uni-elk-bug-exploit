import { BrowserContext, chromium, expect, Locator, Page, test as base } from '@playwright/test';
import path from 'path';

type MetamaskFixture = {
   context: BrowserContext,
   extensionID: string
}

const test = base.extend<MetamaskFixture>({
   context: async ({ }, use) => {
      const pathToExtension = path.join(__dirname, "../metamask-extension");
      const context = await chromium.launchPersistentContext("C:\Users\Khalil\AppData\Local\Google\Chrome\User Data\Default", {
         headless: false,
         args: [
            `--disable-extensions-except=${pathToExtension}`,
            `--load-extension=${pathToExtension}`,
         ]
      });
      await use(context);
      await context.close();
   },

   extensionID: async ({ context }, use) => {
      let [background] = context.backgroundPages();
      if (!background)
         background = await context.waitForEvent("backgroundpage")
      const extensionID: string = background.url().split('/')[2];
      use(extensionID);
   }
})

test('Main', async ({ page, context, extensionID }) => {
   await page.goto(`chrome-extension://${extensionID}/home.html#initialize/welcome`)
   await page.waitForLoadState();
   //close new auto created tab for extension
   const pages: Page[] = context.pages();
   await pages[1].close();

   await page.locator('id=password').fill('ConnectWired')
   await page.getByText('Unlock', { exact: true }).click();

   while (true) {
      await page.goto('https://app.uniswap.org/#/swap');

      await page.locator('.open-currency-select-button').nth(0).click();
      await page.locator('id=token-search-input').fill('ELK');
      await page.getByText('Elk', { exact: true }).click();

      await page.locator('.open-currency-select-button').nth(1).click();
      await page.locator('.css-xy7yfl').nth(4).click();
      await page.locator('.token-amount-input').nth(0).fill('0.01');

      const swapButton = page.locator('id=swap-button');
      const swapDiv = page.locator('.css-yjtn9t');

      const outToken = page.locator('.token-amount-input').nth(1);
      await swapButton.click({ trial: true});
      
      await expect(outToken).not.toBeEmpty();
      await expect(swapDiv).toHaveText(/^Swap$/);

      const outTokenValue: string = await outToken.inputValue();

      if (parseFloat(outTokenValue) > 1) {

         const [transactionConfirmPage] = await Promise.all([
            context.waitForEvent('page'),
            swapButton.click()
         ])
         await transactionConfirmPage.getByText('Confirm', { exact: true }).click();
         /*  
         await page.locator('id=open-settings-dialog-button').click();
          await page.locator('id=toggle-expert-mode-button').click();
         page.on('dialog', async dialog => {
            await dialog.accept('confirm');
         });
         await page.locator('id=confirm-expert-mode').click(); */

      }
   }
})


