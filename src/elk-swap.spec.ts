import { BrowserContext, chromium, Locator, Page, test as base } from '@playwright/test';
import path from 'path';
import * as metamask from '../metamask.config.json';

const SEED_PHRASE: string = metamask.account.seed;
const PASSWORD: string = metamask.account.password;
const ELK_ADDRESS: string = '0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE';

type MetamaskFixture = {
   context: BrowserContext,
   extensionID: string
}

const test = base.extend<MetamaskFixture>({
   context: async ({ }, use) => {
      const pathToExtension = path.join(__dirname, "../metamask-extension");
      const context = await chromium.launchPersistentContext("", {
         headless: false,
         args: [
            `--disable-extensions-except=${pathToExtension}`,
            `--load-extension=${pathToExtension}`,
         ]
      });
      await use(context);
      await context.close();
   },

   extensionID: async ({ context }, use) => {
      let [background] = context.backgroundPages();
      if (!background)
         background = await context.waitForEvent("backgroundpage")
      const extensionID: string = background.url().split('/')[2];
      use(extensionID);
   }
})

test('Main', async ({ page, context, extensionID }) => {
   await page.goto(`chrome-extension://${extensionID}/home.html#initialize/welcome`)
   await page.waitForLoadState();
   //close new auto created tab for extension
   const pages: Page[] = context.pages();
   await pages[1].close();

   page.getByText('Get Started').click();
   page.getByText('Import wallet').click();
   page.getByText('I Agree').click();

   const phraseInput: Locator = page.getByPlaceholder('Paste Secret Recovery Phrase from clipboard');
   const passwordInput: Locator = page.getByLabel('New password (min 8 chars)');
   const confirmPasswordInput: Locator = page.getByLabel('Confirm password');

   await phraseInput.fill(SEED_PHRASE);
   await passwordInput.fill(PASSWORD);
   await confirmPasswordInput.fill(PASSWORD);

   await page.getByText('I have read and agree to the Terms of Use').click();
   await page.getByText('Import', { exact: true }).click();
   await page.getByText('All Done', { exact: true }).click();

   const [elkSwapConnect] = await Promise.all([
      context.waitForEvent('page'),
      page.goto('https://app.elk.finance/swap/42161/USDT/ELK')
   ])

   await elkSwapConnect.getByText('Next', { exact: true }).click();
   await elkSwapConnect.getByText('Connect', { exact: true }).click();
   await elkSwapConnect.getByText('Approve', { exact: true }).click();
   await elkSwapConnect.getByText('Switch network', { exact: true }).click();

   //await page.locator('#swap-currency-output').getByPlaceholder('0.0').fill('0.01');
   //await page.locator('id=swap-button').click();

   //const [transactionConfirmPage] = await Promise.all([
   //   context.waitForEvent('page'),
   //   await page.locator('id=confirm-swap-or-send').click()
   //])

   //await transactionConfirmPage.getByText('Confirm', { exact: true }).click();
   //await page.getByText('Close', { exact: true }).click();
   const uniswap = await context.newPage();
   await uniswap.goto('https://app.uniswap.org/#/swap');
   await uniswap.getByText('Connect', { exact: true }).click();

   const [uniSwapConnect] = await Promise.all([
      context.waitForEvent('page'),
      uniswap.getByText('MetaMask', { exact: true }).click()
   ])

   await uniSwapConnect.getByText('Next', { exact: true }).click();
   await uniSwapConnect.getByText('Connect', { exact: true }).click();

   await uniswap.locator('.open-currency-select-button').nth(0).click();
   await uniswap.locator('id=token-search-input').fill(ELK_ADDRESS);
   await uniswap.getByText('Elk', { exact: true }).click();
   await uniswap.getByText('I understand', { exact: true }).click();
   await uniswap.locator('.open-currency-select-button').nth(1).click();
   await uniswap.locator('.css-xy7yfl').nth(4).click();
   await uniswap.locator('.token-amount-input').nth(0).fill('0.01');
   await uniswap.locator('id=swap-button').click();

   const [transactionConfirmPage] = await Promise.all([
      context.waitForEvent('page'),
      page.getByText('Confirm Swap').click()
   ])

   await transactionConfirmPage.getByText('Confirm', { exact: true }).click();
   await page.getByText('Close', { exact: true }).click();

   await new Promise(() => { });
})

const confirmTransaction = async (context: BrowserContext, page: Page): Promise<void> => {

}
