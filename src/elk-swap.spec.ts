import { BrowserContext, chromium, Locator, Page, test as base } from '@playwright/test';
import path from 'path';
import * as metamask from '../metamask.config.json';

type MetamaskFixture = {
   context: BrowserContext,
   extensionID: string
}

const test = base.extend<MetamaskFixture>({
   context: async ({ }, use) => {
      const pathToExtension = path.join(__dirname, "../metamask-extension");
      const context = await chromium.launchPersistentContext("", {
         headless: false,
         args: [
            `--disable-extensions-except=${pathToExtension}`,
            `--load-extension=${pathToExtension}`,
         ]
      });
      await use(context);
      await context.close();
   },

   extensionID: async ({ context }, use) => {
      let [background] = context.backgroundPages();
      if (!background)
         background = await context.waitForEvent("backgroundpage")
      const extensionID: string = background.url().split('/')[2];
      use(extensionID);
   }
})

test('demo extension test', async ({ page, context, extensionID }) => {
   await page.goto(`chrome-extension://${extensionID}/home.html#initialize/welcome`)
   await page.waitForLoadState();
   //close new auto created tab for extension
   const pages: Page[] = context.pages();
   await pages[1].close();

   page.getByText('Get Started').click();
   page.getByText('Import wallet').click();
   page.getByText('I Agree').click();

   const phraseInput: Locator = page.getByPlaceholder('Paste Secret Recovery Phrase from clipboard');
   const passwordInput: Locator = page.getByLabel('New password (min 8 chars)');
   const confirmPasswordInput: Locator = page.getByLabel('Confirm password');

   await phraseInput.fill('Testing...');
   await passwordInput.fill('Testing...');
   await confirmPasswordInput.fill('Testing...');

   await page.getByText('I have read and agree to the Terms of Use').click();
   await page.getByText('Import', { exact: true }).click();

   await new Promise(() => { });

})

