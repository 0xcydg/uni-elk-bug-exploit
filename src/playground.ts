import { BrowserContext, chromium, expect, Locator, Page, test as base } from '@playwright/test';
import path from 'path';
import * as metamask from '../metamask.config.json';

const SEED_PHRASE: string = metamask.account.seed;
const PASSWORD: string = metamask.account.password;
const ELK_ADDRESS: string = '0xeEeEEb57642040bE42185f49C52F7E9B38f8eeeE';

type MetamaskFixture = {
   context: BrowserContext,
   extensionID: string
}

const test = base.extend<MetamaskFixture>({
   context: async ({ }, use) => {
      const pathToExtension = path.join(__dirname, "../metamask-extension");
      const context = await chromium.launchPersistentContext("C:\Users\Khalil\AppData\Local\Google\Chrome\User Data\Default", {
         headless: false,
         args: [
            `--disable-extensions-except=${pathToExtension}`,
            `--load-extension=${pathToExtension}`,
         ]
      });
      await use(context);
      await context.close();
   },

   extensionID: async ({ context }, use) => {
      let [background] = context.backgroundPages();
      if (!background)
         background = await context.waitForEvent("backgroundpage")
      const extensionID: string = background.url().split('/')[2];
      use(extensionID);
   }
})

test('Main', async ({ page, context, extensionID }) => {
   await page.goto(`chrome-extension://${extensionID}/home.html#initialize/welcome`)
   await page.waitForLoadState();
   //close new auto created tab for extension
   const pages: Page[] = context.pages();
   await pages[1].close();

   page.getByText('Get Started').click();
   page.getByText('Import wallet').click();
   page.getByText('I Agree').click();

   const phraseInput: Locator = page.getByPlaceholder('Paste Secret Recovery Phrase from clipboard');
   const passwordInput: Locator = page.getByLabel('New password (min 8 chars)');
   const confirmPasswordInput: Locator = page.getByLabel('Confirm password');

   await phraseInput.fill(SEED_PHRASE);
   await passwordInput.fill(PASSWORD);
   await confirmPasswordInput.fill(PASSWORD);

   await page.getByText('I have read and agree to the Terms of Use').click();
   await page.getByText('Import', { exact: true }).click();
   await page.getByText('All Done', { exact: true }).click();

   await page.goto(`chrome-extension://${extensionID}/home.html#settings/networks/add-network`);

   //const chainInputLocator: Locator = page.locator('.form-field__input');
   const chainInputLocator = async (nth: number, value: string) => await page.locator('.form-field__input').nth(nth).type(value);

   await chainInputLocator(0, 'Arbitrum One')
   await chainInputLocator(1, 'https://arb1.arbitrum.io/rpc')
   //console.log(await page.isEnabled('button:has-text("Save")'));
   await chainInputLocator(2, '42161')
   await chainInputLocator(3, 'ETH')
   await chainInputLocator(4, 'https://arbiscan.io/');
   //console.log(await page.isEnabled('button:has-text("Save")'));
   await page.getByText('Save', { exact: true }).click();

   //await new Promise(() => { });
   const uniswap = await context.newPage();
   await uniswap.goto('https://app.uniswap.org/#/swap');

   await uniswap.getByText('Connect', { exact: true }).click();
   const [uniSwapConnect] = await Promise.all([
      context.waitForEvent('page'),
      uniswap.getByText('MetaMask', { exact: true }).click()
   ])
   await uniSwapConnect.getByText('Next', { exact: true }).click();
   await uniSwapConnect.getByText('Connect', { exact: true }).click();
   await uniSwapConnect.waitForEvent('close');

   let i = 0
   while (true) {
      i++;
      await uniswap.goto('https://app.uniswap.org/#/swap');
      await new Promise(() => { });

      if (i <= 1) {
         await uniswap.getByText('Connect', { exact: true }).click();
         await uniswap.getByText('MetaMask', { exact: true }).click()
      }

      await uniswap.locator('.open-currency-select-button').nth(0).click();
      await uniswap.locator('id=token-search-input').fill(ELK_ADDRESS);
      await uniswap.getByText('Elk', { exact: true }).click();

      if (i <= 1) {
         await uniswap.getByText('I understand', { exact: true }).click();
      }

      await uniswap.locator('.open-currency-select-button').nth(1).click();
      await uniswap.locator('.css-xy7yfl').nth(4).click();
      await uniswap.locator('.token-amount-input').nth(0).fill('0.01');

      const swapButton = uniswap.locator('id=swap-button');
      const outToken = uniswap.locator('.token-amount-input').nth(1);

      await swapButton.click({ trial: true });
      
      await expect(outToken).not.toBeEmpty();
      const outTokenValue: string = await outToken.inputValue();
      console.log(outTokenValue)

      if (parseFloat(outTokenValue) > 1) {
         await swapButton.click();

         const [transactionConfirmPage] = await Promise.all([
            context.waitForEvent('page'),
            uniswap.locator('id=confirm-swap-or-send').click()
         ])

         await transactionConfirmPage.getByText('Confirm', { exact: true }).click()
         await uniswap.getByText('Close', { exact: true }).click();
      }
   }
})

